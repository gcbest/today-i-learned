version: 2.1
executors:
  node-16:
    docker:
      - image: gcbest/cimg-pnpm
orbs: 
  newman: postman/newman@1.0.0

ignore_develop_and_master_branches: &ignore_develop_and_master_branches
  branches:
    ignore:
      - develop
      - master
install_railway: &install_railway
  run:
    name: Install Railway
    command: npm i -g @railway/cli
only_develop_and_master_branches: &only_develop_and_master_branches
  branches:
    only:
      - develop
      - master
only_master_branch: &only_master_branch
  branches:
    only:
      - master
restore_pnpm_cache: &restore_pnpm_cache
  restore_cache:
    key: v1-deps-{{ checksum "pnpm-lock.yaml" }}
save_pnpm_cache: &save_pnpm_cache
  save_cache:
    key: v1-deps-{{ checksum "pnpm-lock.yaml" }}
    paths: 
      - node_modules
restore_next_build_cache: &restore_next_build_cache
  restore_cache:
    key: next-build-deps-{{ checksum "pnpm-lock.yaml" }}
save_next_build_cache: &save_next_build_cache
  save_cache:
    key: next-build-deps-{{ checksum "pnpm-lock.yaml" }}
    paths: 
      - ./.next/cache

jobs:
  lint:
    executor: node-16
    steps:
      - checkout
      - *restore_pnpm_cache
      - run:
          name: Lint Styles 
          command: pnpx eslint . --ext .js,.jsx,.ts,.tsx
      - *save_pnpm_cache
  test_integration:
    executor: node-16
    steps:
      - checkout
      - *restore_pnpm_cache
      - run: 
          name: Install Packages
          command: pnpm install
      - *save_pnpm_cache
      - run:
          name: Integration
          command: pnpm test:integration
  test_e2e:
    docker:
      - image: mcr.microsoft.com/playwright:v1.23.1-focal
    environment:
        NODE_ENV: development # Needed if playwright is in `devDependencies`
    steps:
      - checkout
      - *restore_pnpm_cache
      - run: 
          name: Install Packages
          command: |
              npx playwright install
              npm install
      - *save_pnpm_cache
      - run:
          name: End to End
          command: npm run test:e2e
  deploy_staging:
    executor: node-16
    steps:
      - checkout
      - *install_railway
      - *restore_next_build_cache
      - run:
          name: Deploy
          command: RAILWAY_TOKEN=${RAILWAY_TOKEN_STAGING} railway up
      - *save_next_build_cache
  test_staging_api:
    executor: newman/postman-newman-docker
    steps:
      - checkout
      - run: mkdir test-results
      - newman/newman-run:
          collection: ./__tests__/endpoints/pages.postman_collection.json
          environment: ./__tests__/endpoints/staging.postman_environment.json
          additional-options: -r cli,junit --reporter-junit-export ./test-results
      - store_test_results:
          path: test-results
  deploy_production:
    executor: node-16
    steps:
      - checkout
      - *install_railway
      - *restore_next_build_cache
      - run:
          name: Deploy
          command: RAILWAY_TOKEN=${RAILWAY_TOKEN_PRODUCTION} railway up
      - *save_next_build_cache

workflows:
  lint_test_deploy:
    jobs:
      - lint:
          filters:
            *ignore_develop_and_master_branches
      - test_integration:
          requires:
            - lint
          filters:
            *ignore_develop_and_master_branches
      - test_e2e:
          requires:
            - lint
          filters:
            *ignore_develop_and_master_branches
      - deploy_staging:
          filters:
            *only_develop_and_master_branches
      - test_staging_api:
          requires:
            - deploy_staging
          filters:
            *only_develop_and_master_branches
      - hold:
          requires:
            - test_staging_api
          type: approval
          filters:
            *only_master_branch
      - deploy_production:
          requires:
            - hold
          filters:
            *only_master_branch
